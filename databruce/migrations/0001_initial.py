# Generated by Django 5.1.3 on 2025-03-14 16:14

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ArchiveLinks',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('archive_url', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Archive Links',
                'db_table': 'archive_links',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, default='')),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Bands',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('brucebase_url', models.TextField(blank=True, default='', unique=True)),
                ('name', models.TextField(blank=True, default='')),
                ('appearances', models.IntegerField()),
                ('springsteen_band', models.BooleanField()),
                ('mbid', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Bands',
                'db_table': 'bands',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Bootlegs',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('slid', models.IntegerField(blank=True, default='')),
                ('mbid', models.TextField(blank=True, default='')),
                ('category', models.TextField(blank=True, default='')),
                ('title', models.TextField(blank=True, default='')),
                ('label', models.TextField(blank=True, default='')),
                ('source', models.TextField(blank=True, default='')),
                ('source_info', models.TextField(blank=True, default='')),
                ('version_info', models.TextField(blank=True, default='')),
                ('transfer', models.TextField(blank=True, default='')),
                ('editor', models.TextField(blank=True, default='')),
                ('type', models.TextField(blank=True, default='')),
                ('catalog_number', models.TextField(blank=True, default='')),
                ('media_type', models.TextField(blank=True, default='')),
                ('has_info', models.BooleanField()),
                ('has_artwork', models.BooleanField()),
                ('archive_id', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Bootlegs',
                'db_table': 'bootlegs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BootlegsByDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.TextField(blank=True, default='')),
                ('venue_location', models.TextField(blank=True, default='')),
                ('count', models.BigIntegerField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Bootlegs By Date',
                'db_table': 'bootlegs_by_date',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Cities',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='name', default='')),
                ('num_events', models.IntegerField(blank=True, default='')),
                ('aliases', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Cities',
                'db_table': 'cities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Continents',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('continent_name', models.TextField(blank=True, default='')),
                ('num_events', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Continents',
                'db_table': 'continents',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Countries',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, default='', unique=True)),
                ('num_events', models.IntegerField(blank=True, default='')),
                ('alpha_2', models.TextField(blank=True, default='')),
                ('alpha_3', models.TextField(blank=True, default='')),
                ('aliases', models.TextField(blank=True, default='')),
                ('mbid', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'db_table': 'countries',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Covers',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('event_date', models.TextField(blank=True, default='')),
                ('cover_url', models.TextField(blank=True, default='', unique=True)),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Covers',
                'db_table': 'covers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, default='')),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('event_num', models.IntegerField()),
                ('id', models.TextField(db_column='event_id', primary_key=True, serialize=False)),
                ('event_date', models.DateField(blank=True, default=None)),
                ('early_late', models.TextField(blank=True, default='')),
                ('public', models.BooleanField(blank=True, default=False)),
                ('brucebase_url', models.TextField(blank=True, default='')),
                ('event_type', models.TextField(blank=True, default='')),
                ('event_title', models.TextField(blank=True, default='')),
                ('event_certainty', models.TextField(blank=True, default='')),
                ('setlist_certainty', models.TextField(blank=True, default='')),
                ('event_date_note', models.TextField(blank=True, default='')),
                ('bootleg', models.BooleanField(blank=True, default=False)),
                ('official', models.BooleanField(blank=True, default=False)),
                ('nugs', models.BooleanField(blank=True, default=False)),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Events',
                'db_table': 'events',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventsWithInfo',
            fields=[
                ('id', models.TextField(blank=True, db_column='event_id', primary_key=True, serialize=False)),
                ('event_date', models.DateField(blank=True, default='', verbose_name='Date')),
                ('event_type', models.TextField(blank=True, default='')),
                ('event_title', models.TextField(blank=True, default='', verbose_name='Title')),
                ('formatted_date', models.TextField(blank=True, default='')),
                ('name', models.TextField(blank=True, default='')),
                ('city', models.TextField(blank=True, default='')),
                ('state_name', models.TextField(blank=True, default='')),
                ('state', models.TextField(blank=True, default='')),
                ('country', models.TextField(blank=True, default='')),
                ('event_url', models.TextField(blank=True, default='')),
                ('venue_loc', models.TextField(blank=True, default='')),
                ('venue_url', models.TextField(blank=True, default='')),
                ('artist_url', models.TextField(blank=True, default='')),
                ('event_certainty', models.TextField(blank=True, default='')),
                ('setlist_certainty', models.TextField(blank=True, default='')),
                ('note', models.TextField(blank=True, default='')),
                ('nugs_release', models.BooleanField(blank=True, default='')),
                ('nugs_id', models.TextField(blank=True, default='')),
                ('archive_url', models.TextField(blank=True, default='')),
            ],
            options={
                'db_table': 'events_with_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EveryTimePlayed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_date', models.DateField(blank=True, default='')),
                ('day', models.TextField(blank=True, default='')),
                ('venue_loc', models.TextField(blank=True, default='')),
                ('ssn', models.IntegerField(blank=True, default='')),
                ('set_name', models.TextField(blank=True, default='')),
                ('last', models.TextField(blank=True, default='')),
                ('prev', models.TextField(blank=True, default='')),
                ('song', models.TextField(blank=True, default='')),
                ('next', models.TextField(blank=True, default='')),
                ('pos', models.IntegerField(blank=True, default='')),
                ('total', models.IntegerField(blank=True, default='')),
                ('rel_pos', models.DecimalField(blank=True, decimal_places=5, default='', max_digits=10)),
            ],
            options={
                'db_table': 'every_time_played',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NugsReleases',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('nugs_id', models.IntegerField(blank=True, default='')),
                ('release_date', models.TextField(blank=True, default='')),
                ('nugs_url', models.TextField(blank=True, default='')),
                ('thumbnail_url', models.TextField(blank=True, default='')),
                ('name', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Nugs Releases',
                'db_table': 'nugs_releases',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Onstage',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('note', models.TextField(blank=True, default='')),
                ('instruments', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'On Stage',
                'db_table': 'onstage',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OpenersClosers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('song_id', models.TextField(blank=True, default='')),
                ('position', models.TextField(blank=True, default='')),
                ('num', models.BigIntegerField(blank=True, default='')),
            ],
            options={
                'db_table': 'openers_closers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PremiereDebut',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('song_name', models.TextField(blank=True, default='')),
                ('debuts', models.TextField(blank=True, default='')),
                ('premiere', models.IntegerField(blank=True, default='')),
            ],
            options={
                'db_table': 'premiere_debut',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Relations',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('brucebase_url', models.TextField(blank=True, default='', unique=True)),
                ('name', models.TextField(blank=True, db_column='relation_name', default='')),
                ('appearances', models.IntegerField()),
                ('aliases', models.TextField(blank=True, default='')),
                ('fts', models.TextField(blank=True, default='')),
                ('instruments', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Relations',
                'db_table': 'relations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Releases',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('brucebase_id', models.TextField(blank=True, default='')),
                ('name', models.TextField(blank=True, default='')),
                ('type', models.TextField(blank=True, default='')),
                ('date', models.DateField(blank=True, db_column='release_date', default='')),
                ('short_name', models.TextField(blank=True, default='')),
                ('thumb', models.TextField(blank=True, default='')),
                ('mbid', models.TextField(blank=True, default='')),
                ('fts', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Releases',
                'db_table': 'releases',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ReleaseTracks',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('track_num', models.IntegerField(db_column='track_num')),
                ('note', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Release Tracks',
                'db_table': 'release_tracks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Setlists',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('setlist_song_id', models.IntegerField(blank=True, default='')),
                ('set_name', models.TextField(blank=True, default='')),
                ('song_num', models.IntegerField()),
                ('song_note', models.TextField(blank=True, default='')),
                ('segue', models.BooleanField()),
                ('premiere', models.BooleanField()),
                ('debut', models.BooleanField()),
                ('position', models.TextField(blank=True, default='')),
                ('last', models.TextField(blank=True, default='')),
                ('next', models.TextField(blank=True, default='')),
                ('last_time_played', models.TextField(blank=True, default='')),
                ('band_premiere', models.BooleanField()),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Setlists',
                'db_table': 'setlists',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SetlistsBySetAndDate',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('min', models.IntegerField(blank=True, default='')),
                ('set_name', models.TextField(blank=True, default='')),
                ('setlist', models.TextField(blank=True, default='')),
                ('setlist_no_note', models.TextField(blank=True, default='')),
            ],
            options={
                'db_table': 'setlists_by_set_and_date',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Snippets',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('set_name', models.TextField(blank=True, default='')),
                ('position', models.IntegerField(db_column='snippet_pos')),
                ('snippet_note', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Snippets',
                'db_table': 'snippets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SongGaps',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_num', models.IntegerField(blank=True, default='')),
                ('last', models.TextField(blank=True, default='')),
                ('next', models.TextField(blank=True, default='')),
                ('last_time_played', models.TextField(blank=True, default='')),
            ],
            options={
                'db_table': 'song_gaps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Songs',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('brucebase_url', models.TextField(unique=True)),
                ('song_name', models.TextField(blank=True, default='', verbose_name='Name')),
                ('short_name', models.TextField(blank=True, default='', verbose_name='Short Name')),
                ('num_plays_public', models.IntegerField(verbose_name='Public')),
                ('num_plays_private', models.IntegerField(verbose_name='Private')),
                ('num_plays_snippet', models.IntegerField()),
                ('opener', models.IntegerField(verbose_name='Opener')),
                ('closer', models.IntegerField(verbose_name='Closer')),
                ('cover', models.IntegerField()),
                ('sniponly', models.IntegerField()),
                ('original_artist', models.TextField(blank=True, default='', verbose_name='Original Artist')),
                ('aliases', models.TextField(blank=True, default='')),
                ('fts', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Songs',
                'db_table': 'songs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SongsAfterRelease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('song_id', models.TextField(blank=True, default='')),
                ('first_release', models.DateField(blank=True, default='')),
                ('first_event', models.TextField(blank=True, default='')),
                ('num_post_release', models.BigIntegerField(blank=True, default='')),
            ],
            options={
                'db_table': 'songs_after_release',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SongsFirstRelease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('song_id', models.TextField(blank=True, default='')),
                ('date', models.TextField(blank=True, default='')),
                ('year', models.TextField(blank=True, default='')),
                ('release_name', models.TextField(blank=True, default='')),
                ('brucebase_id', models.TextField(blank=True, default='')),
                ('release_thumb', models.TextField(blank=True, default='')),
                ('mbid', models.TextField(blank=True, default='')),
            ],
            options={
                'db_table': 'songs_first_release',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SongsPage',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('venue_id', models.IntegerField()),
                ('formatted_loc', models.TextField(blank=True, default='')),
                ('gap', models.IntegerField()),
                ('set_name', models.TextField(blank=True, default='')),
                ('song_num', models.IntegerField()),
                ('song_note', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Song',
                'db_table': 'song_page',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='States',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('state_abbrev', models.TextField(blank=True, default='', unique=True)),
                ('name', models.TextField(blank=True, default='')),
                ('num_events', models.IntegerField()),
                ('mbid', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'States',
                'db_table': 'states',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('tags', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Tags',
                'db_table': 'tags',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TourLegs',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, default='')),
                ('num_shows', models.IntegerField()),
                ('note', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Tour Legs',
                'db_table': 'tour_legs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brucebase_tag', models.TextField()),
                ('tour_name', models.TextField(blank=True, default='')),
                ('num_shows', models.IntegerField()),
                ('num_songs', models.IntegerField()),
                ('num_legs', models.IntegerField()),
                ('start_year', models.IntegerField(blank=True, default='')),
                ('end_year', models.IntegerField(blank=True, default='')),
                ('fts', models.TextField(blank=True, default='')),
                ('brucebase_id', models.TextField(blank=True, default='', unique=True)),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Tours',
                'db_table': 'tours',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Venues',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('brucebase_url', models.TextField(blank=True, default='', unique=True)),
                ('name', models.TextField(blank=True, default='')),
                ('detail', models.TextField(blank=True, default='', unique=True)),
                ('num_events', models.IntegerField()),
                ('aliases', models.TextField(blank=True, default='')),
                ('mb_id', models.TextField(blank=True, default='')),
                ('updated_at', models.DateTimeField(blank=True, default='')),
                ('created_at', models.DateTimeField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'Venues',
                'db_table': 'venues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SetlistsByDate',
            fields=[
                ('event', models.OneToOneField(blank=True, db_column='event_id', default='', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='databruce.events')),
                ('setlist', models.TextField(blank=True, default='')),
            ],
            options={
                'db_table': 'setlists_by_date',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SetlistNotes',
            fields=[
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='notes_setlist', serialize=False, to='databruce.setlists')),
                ('num', models.TextField(blank=True, default='')),
                ('note', models.TextField(blank=True, default='')),
                ('gap', models.TextField(blank=True, default='')),
                ('last', models.TextField(blank=True, default='')),
                ('last_date', models.TextField(blank=True, default='')),
            ],
            options={
                'db_table': 'setlist_notes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SongsPageNew',
            fields=[
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='databruce.songs')),
            ],
            options={
                'verbose_name_plural': 'Songs Page New',
                'db_table': 'songs_page_new',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VenuesText',
            fields=[
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='databruce.venues')),
                ('brucebase_url', models.TextField(blank=True, default='')),
                ('formatted_loc', models.TextField(blank=True, default='')),
                ('name', models.TextField(blank=True, default='')),
                ('city', models.TextField(blank=True, default='')),
                ('state', models.TextField(blank=True, default='')),
                ('country', models.TextField(blank=True, default='')),
                ('aliases', models.TextField(blank=True, default='')),
                ('num_events', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'Venues Text',
                'db_table': 'venues_text',
                'managed': False,
            },
        ),
    ]
